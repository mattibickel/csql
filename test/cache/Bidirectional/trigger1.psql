CREATE LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS log_insert_t2() CASCADE ; 
CREATE OR REPLACE FUNCTION log_insert_t2() RETURNS trigger AS $triggerinsertt2$ BEGIN insert into csql_log_int (tablename, pkid, operation, cacheid) values ('t2', NEW.f1, 1, 1); insert into csql_log_int (tablename, pkid, operation, cacheid) values ('t2', NEW.f1, 1, 2); RETURN NEW; END; $triggerinsertt2$ LANGUAGE plpgsql; 
create trigger triggerinsertt2 AFTER INSERT on t2 FOR EACH ROW EXECUTE PROCEDURE log_insert_t2(); 
DROP FUNCTION IF EXISTS log_update_t2() CASCADE ;
CREATE OR REPLACE FUNCTION log_update_t2() RETURNS trigger AS $triggerupdatet2$ BEGIN insert into csql_log_int (tablename, pkid, operation, cacheid) values ('t2', OLD.f1, 2, 1); insert into csql_log_int (tablename, pkid, operation, cacheid) values ('t2', NEW.f1, 1, 1); insert into csql_log_int (tablename, pkid, operation, cacheid) values ('t2', OLD.f1, 2, 2); insert into csql_log_int (tablename, pkid, operation, cacheid) values ('t2', NEW.f1, 1, 2); RETURN NEW; END; $triggerupdatet2$ LANGUAGE plpgsql; 
create trigger triggerupdatet2 AFTER UPDATE on t2 FOR EACH ROW EXECUTE PROCEDURE log_update_t2();
DROP FUNCTION IF EXISTS log_delete_t2() CASCADE ;
CREATE OR REPLACE FUNCTION log_delete_t2() RETURNS trigger AS $triggerdeletet2$ BEGIN insert into csql_log_int (tablename, pkid, operation, cacheid) values ('t2', OLD.f1, 2, 1); insert into csql_log_int (tablename, pkid, operation, cacheid) values ('t2', OLD.f1, 2, 2); RETURN NEW; END; $triggerdeletet2$ LANGUAGE plpgsql; 
create trigger triggerdeletet2 AFTER DELETE on t2  FOR EACH ROW EXECUTE PROCEDURE log_delete_t2();
