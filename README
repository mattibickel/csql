Introduction 
------------
	CSQL is a fast, multi-threaded SQL main memory database engine. It works in embedded mode, where database client and server run in the same host, avoiding network latency. It provides very high throughput of 100,000 selects/sec and 50,000 updates/sec. Applications shall access csql through standard interfaces,  ODBC or JDBC. It also provides proprietary APIs to access SQL engine and Storage engine directly.
	It aids in the development of high performance, fault-resilent applications requiring concurrent access to the shared data.

	CSQL shall also be used as client side caching mechanism for any database system without compromising on transactional properties and indexed access. This is achieved by using CSQL-main memory database to cache the data from the target database (any traditional disk based database system). 
	This solution has been designed with modern database requirements in mind, and particularly for use within high-volume environment that requires high performance, while still supporting the transactional properties. Applications shall use this caching solution with no or minimal application code changes.
	Perfomance benchmarking reveals that application throughput may increase by a factor of 20 to 100 by incorporating data caching in its architecture.
	It is a free software, licensed with the GNU GENERAL PUBLIC LICENSE, http://www.gnu.org/. Refer COPYING file for Licensing information.

Platforms Supported
-------------------
Linux 

Compilers Supported
-------------------
g++ in linux

Compiling the source
--------------------
Go to the root directory and enter the following commands.

$ export JDK_HOME=<path of jdk home>
$ export PATH=$PATH:$JDK_HOME/bin
$ ./build.ksh
$ make
$ make install
$ ./csqlinstall.ksh

This will create "install" directory under the current directory and places all the executables created in bin directory and libraries in lib directory. 
If you want to install in some other directory then change the directory in --prefix option in build.ksh file before executing build.ksh script.

Available Documentation
-----------------------
1.User Manual is available under the docs directory
2.HTML API Reference for DB API under the docs/html directory (Refer next section)
3.DB API, SQL API, JDBC, ISQL  example programs under the examples directory

Generating API Reference
------------------------
Go to the root directory and enter
$doxygen

This will create "docs/html" directory under which API Reference html files are stored. Refer index.html in that directory.

Starting the Server
-------------------
Note: kernel.shmmax should be set to more than 500 MB before starting the server

In linux for setting 1GB enter
$sysctl -w kernel.shmmax=1000000000

You should find csqlserver executable under the bin directory of the installation.
Change csql.conf file under the installation root directory if necessary.
Set the CSQL_CONFIG_FILE environment variable to absolute path of csql.conf file.

For example, if csql.conf is available at /tmp directory, then
$export CSQL_CONFIG_FILE=/tmp/csql.conf

Set the LD_LIBRARY_PATH environment variable to point to csql libraries
Let us say if you have installed csql under /home/csql/install, then
$export LD_LIBRARY_PATH=/home/csql/install/lib:$LD_LIBRARY_PATH

Note: 
setupenv.ksh script is available at the root directory which shall be used to
set the necessary environment variables.

Start the server using csqlserver executable
$./csqlserver

This starts the server and creates the database file.

Note:
Refer UserManual.pdf available in docs folder to know how to work with csql

Shutting down the Server
------------------------
Pressing Ctrl-C on the terminal where csqlserver is running, 
is safe and will stop the server gracefully by removing the database file.
